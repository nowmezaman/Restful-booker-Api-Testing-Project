{
	"info": {
		"_postman_id": "adf536f8-469a-4475-8f20-52e5c248bf03",
		"name": "Booking_env_driven",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32317940",
		"_collection_link": "https://bold-crescent-964459.postman.co/workspace/SQA~3213c584-9164-44eb-b038-e65d05a4c1ff/collection/32317940-adf536f8-469a-4475-8f20-52e5c248bf03?action=share&source=collection_link&creator=32317940"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Access token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = pm.response.json()\r",
									"pm.environment.set(\"accesstoken\", data.token)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\t\"username\": \"admin\",\r\n\t\"password\": \"password123\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth"
							]
						},
						"description": "This API generates an authentication token that identifies  \nthe user using this application and is used to update and delete Bookings."
					},
					"response": []
				}
			],
			"description": "The Authentication API enables you to manage all aspects of user identity when you use auth. It offers endpoints so users can log in, sign up, log out, access APIs, and more."
		},
		{
			"name": "Create Booking data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()\r",
							"pm.environment.set(\"bookingid\", data.bookingid)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//firstname\r",
							"var firstName = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"console.log(firstName)\r",
							"pm.environment.set(\"firstname\", firstName)\r",
							"\r",
							"//lastname\r",
							"var lastName = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"pm.environment.set(\"lastname\", lastName)\r",
							"\r",
							"//Date\r",
							"const date = require('moment')\r",
							"const today = date()\r",
							"console.log(today.format(\"DD-MM-YY\"))\r",
							"\r",
							"//Date - 4 yrs 4 months and 4 days ahead\r",
							"const date0 = require('moment')\r",
							"const today0 = date0()\r",
							"console.log(today0.add(10, 'd').add(4, 'M').add(4, 'Y').format(\"DD-MM-YY HH:mm:ss\"))\r",
							"\r",
							"//Date - Going 4 yrs and 4 days back\r",
							"const date1 = require('moment')\r",
							"const today1 = date1()\r",
							"console.log(today1.subtract(4, 'Y').format(\"DD-MM-YY HH:mm:ss\"))\r",
							"\r",
							"//Date Time\r",
							"const date2 = require('moment')\r",
							"const today2 = date2()\r",
							"console.log(today2.format(\"DD-MM-YY HH:mm:ss\"))\r",
							"\r",
							"//checkin\r",
							"let number = Math.random()*10;\r",
							"var checkin = today.add(number, 'd').format(\"YYYY-MM-DD\")\r",
							"console.log(checkin)\r",
							"pm.environment.set('checkin', checkin)\r",
							"\r",
							"//checkout\r",
							"const date3 = require('moment')\r",
							"const today3 = date3()\r",
							"var num = Math.random()*10;\r",
							"var checkout = today3.add(num, 'M').format(\"YYYY-MM-DD\")\r",
							"pm.environment.set(\"checkout\", checkout)\r",
							"console.log(checkout)\r",
							"\r",
							"//Additionalneeds\r",
							"// let additionalneeds = \"Breakfast\"\r",
							"const additionalneeds = [\"Breakfast\", \"Lunch\", \"Dinner\"];\r",
							"var number1 = Math.floor(Math.random()*3);\r",
							"pm.environment.set(\"additionalneeds\", additionalneeds[number1])\r",
							"console.log(number1)\r",
							"\r",
							"//Totalprice\r",
							"var total_price = Math.floor((Math.random()*500) + 600)\r",
							"pm.environment.set(\"total_price\", total_price)\r",
							"\r",
							"//depositpaid\r",
							"var depositpaid = pm.variables.replaceIn(\"{{$randomBoolean}}\")\r",
							"pm.environment.set(\"depositpaid\", depositpaid)\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\" : \"{{firstname}}\",\r\n\t\"lastname\" : \"{{lastname}}\",\r\n\t\"totalprice\" : {{total_price}},\r\n\t\"depositpaid\" : {{depositpaid}},\r\n\t\"bookingdates\" : {\r\n    \t\"checkin\" : \"{{checkin}}\",\r\n    \t\"checkout\" : \"{{checkout}}\"\r\n\t},\r\n\t\"additionalneeds\" : \"{{additionalneeds}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking"
					]
				},
				"description": "This API allows you to create Booking"
			},
			"response": []
		},
		{
			"name": "Fetch Booking Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let statusCode = pm.response.code\r",
							"\r",
							"switch(statusCode){\r",
							"\r",
							"    case 200:\r",
							"        let dta = pm.response.json()\r",
							"        \r",
							"        //firstname\r",
							"        pm.test(\"First Name Validation\", function(){\r",
							"            pm.expect(pm.environment.get(\"firstname\")).to.eql(dta.firstname)\r",
							"        });\r",
							"\r",
							"        //lastname\r",
							"        pm.test(\"Last Name Validation\", function(){\r",
							"            pm.expect(pm.environment.get(\"lastname\")).to.eql(dta.lastname)\r",
							"        });\r",
							"\r",
							"        //depositpaid\r",
							"        pm.test(\"Deposit paid Validation\", function(){\r",
							"            pm.expect(pm.environment.get(\"depositpaid\")).to.eql(String(dta.depositpaid))\r",
							"        });\r",
							"\r",
							"\r",
							"        //totalprice\r",
							"        pm.test(\"Total Price Validation\", function(){\r",
							"            pm.expect(parseInt(pm.environment.get(\"total_price\"))).to.eql(dta.totalprice)\r",
							"        });\r",
							"\r",
							"        //checkin\r",
							"        pm.test(\"Checkin Date Validation\", function(){\r",
							"            pm.expect(pm.environment.get(\"checkin\")).to.eql(dta.bookingdates.checkin)\r",
							"        });\r",
							"\r",
							"        //checkout\r",
							"        pm.test(\"Checkout Date Validation\", function(){\r",
							"            pm.expect(pm.environment.get(\"checkout\")).to.eql(dta.bookingdates.checkout)\r",
							"        });\r",
							"\r",
							"        //additionalneeds\r",
							"        pm.test(\"Additional Needs Validation\", function(){\r",
							"            pm.expect(pm.environment.get(\"additionalneeds\")).to.eql(dta.additionalneeds)\r",
							"        });\r",
							"\r",
							"        break;\r",
							"\r",
							"        case 401 || 403:\r",
							"        pm.test(\"Permission has been denied\")\r",
							"        break;\r",
							"\r",
							"        case 404:\r",
							"            pm.test(\"Not Found\")\r",
							"            break;\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking/{{bookingid}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				},
				"description": "This API endpoint retrieves the details of a specific booking identified by the provided booking ID."
			},
			"response": []
		},
		{
			"name": "Fetch Booking Ids",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking"
					]
				},
				"description": "This API endpoint retrieves the details of a specific booking identified by the provided booking ID."
			},
			"response": []
		},
		{
			"name": "Update specific Booking Id",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//Firstname\r",
							"var firstname = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"pm.environment.set(\"firstname\", firstname)\r",
							"\r",
							"//Lastname\r",
							"var lastname = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"pm.environment.set(\"lastname\", lastname)\r",
							"\r",
							"//TotalPrice\r",
							"let totalprice = Math.floor((Math.random()*500) + 600)\r",
							"pm.environment.set(\"total_price\", totalprice)\r",
							"\r",
							"//DepositPaid\r",
							"let depositpaid = pm.variables.replaceIn(\"{{$randomBoolean}}\")\r",
							"pm.environment.set(\"depositpaid\", depositpaid)\r",
							"\r",
							"\r",
							"const date = require('moment')\r",
							"const today = date()\r",
							"\r",
							"//Checkin\r",
							"let checkin = today.add(4, 'd').format(\"YYYY-MM-DD\")\r",
							"pm.environment.set(\"checkin\", checkin)\r",
							"\r",
							"//Checkout\r",
							"let checkout = today.add(4, 'M').format(\"YYYY-MM-DD\")\r",
							"pm.environment.set(\"checkout\", checkout)\r",
							"\r",
							"//Additional needs\r",
							"const additionalneeds = ['Breakfast', 'Lunch', 'Dinner']\r",
							"let number = Math.floor(Math.random()*3)\r",
							"pm.environment.set(\"additionalneeds\", additionalneeds[number])\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{accesstoken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\" : \"{{firstname}}\",\r\n\t\"lastname\" : \"{{lastname}}\",\r\n\t\"totalprice\" : {{total_price}},\r\n\t\"depositpaid\" : {{depositpaid}},\r\n\t\"bookingdates\" : {\r\n    \t\"checkin\" : \"{{checkin}}\",\r\n    \t\"checkout\" : \"{{checkout}}\"\r\n\t},\r\n\t\"additionalneeds\" : \"{{additionalneeds}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking/{{bookingid}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				},
				"description": "Update an user's Booking details using the users ID."
			},
			"response": []
		},
		{
			"name": "Partially Update Booking Id",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//Firstname\r",
							"var firstname = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"pm.environment.set(\"firstname\", firstname)\r",
							"\r",
							"//Lastname\r",
							"var lastname = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"pm.environment.set(\"lastname\", lastname)\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response_code = pm.response.code\r",
							"\r",
							"switch(response_code){\r",
							"    case 200:\r",
							"    pm.test(\"Successfully Updated\")\r",
							"    break;\r",
							"\r",
							"    case 400:\r",
							"    pm.test(\"Error in coding\")\r",
							"    break;\r",
							"\r",
							"    case 404:\r",
							"    pm.test(\"Not Found\")\r",
							"    break;\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{accesstoken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\" : \"{{firstname}}\",\r\n\t\"lastname\" : \"{{lastname}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking/{{bookingid}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				},
				"description": "Partially update an user's Booking details using the users ID."
			},
			"response": []
		},
		{
			"name": "Verify After Updating Booking Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jdta = pm.response.json()\r",
							"//First name\r",
							"pm.test(\"First Name validation\", function(){\r",
							"    pm.expect(pm.environment.get(\"firstname\")).to.eql(jdta.firstname)\r",
							"});\r",
							"\r",
							"//LastName\r",
							"pm.test(\"Last Name Validation\", function(){\r",
							"    pm.expect(pm.environment.get(\"lastname\")).to.eql(jdta.lastname)\r",
							"});\r",
							"\r",
							"//TotalPrice\r",
							"pm.test(\"Total Price Validation\", function(){\r",
							"    pm.expect(pm.environment.get(\"total_price\")).to.eql(jdta.totalprice)\r",
							"});\r",
							"\r",
							"//Depositpaid\r",
							"pm.test(\"Deposit Paid Validation\", function(){\r",
							"    pm.expect(pm.environment.get(\"depositpaid\")).to.eql(String(jdta.depositpaid))\r",
							"});\r",
							"\r",
							"//Checkin\r",
							"pm.test(\"Checkin Validation\", function(){\r",
							"    pm.expect(pm.environment.get(\"checkin\")).to.eql(jdta.bookingdates.checkin)\r",
							"});\r",
							"\r",
							"//Checkout\r",
							"pm.test(\"Checkout Validation\", function(){\r",
							"    pm.expect(pm.environment.get(\"checkout\")).to.eql(jdta.bookingdates.checkout)\r",
							"});\r",
							"\r",
							"//AdditionalNeeds\r",
							"pm.test(\"Additional Needs Validation\", function(){\r",
							"    pm.expect(pm.environment.get(\"additionalneeds\")).to.eql(jdta.additionalneeds)\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking/{{bookingid}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				},
				"description": "Verify bookng is updated using this API."
			},
			"response": []
		},
		{
			"name": "Delete Booking Id",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{accesstoken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/booking/{{bookingid}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				},
				"description": "This API allows you to delete booking."
			},
			"response": []
		},
		{
			"name": "Verify After Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code 404 is valid\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking/{{bookingid}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				},
				"description": "Verify the booking Id has been deleted."
			},
			"response": []
		}
	]
}